import pickle
from sklearn import linear_model
from sklearn import datasets
import numpy as np
from scanner import WIFI_Scanner

# Load model to memory
save_to = "./data/Trained mul_lr for Room1,2,3"
loaded_model = pickle.load(open(save_to, 'rb'))
# Mannually type in data
wifi_data_headers = ['ec:8c:a2:f2:7a:b8', 'fa:8f:ca:54:a2:6d', '74:3e:2b:7d:04:d8', '74:3e:2b:7d:79:b8', '74:3e:2b:be:1f:e8', '74:3e:2b:be:1f:e2', '74:3e:2b:3d:6d:48', '14:2d:27:37:99:60', '74:3e:2b:be:9d:68', '74:3e:2b:3e:9d:68', '74:3e:2b:7e:9d:68', '74:3e:2b:be:9d:62', '74:3e:2b:7e:88:28', '74:3e:2b:be:9c:d2', '74:3e:2b:be:9c:d8', '74:3e:2b:7e:9c:d8', '74:3e:2b:3e:9c:d8', '74:3e:2b:be:88:22', '74:3e:2b:be:88:28', '74:3e:2b:3e:88:28', '66:eb:8c:0b:20:6e', '74:3e:2b:7d:86:b8', '74:3e:2b:bd:7e:18', '74:3e:2b:bc:d4:22', '74:3e:2b:7c:d4:28', '74:3e:2b:3c:d4:28', 'fa:8f:ca:76:7d:4c', '30:46:9a:fb:c5:a1', '74:3e:2b:be:c7:18', '40:a8:f0:6b:41:44', '74:3e:2b:7c:d2:d8', '74:3e:2b:3c:d2:d8', 'fa:8f:ca:52:95:af', '74:3e:2b:7d:6d:4c', '74:3e:2b:3d:6d:4c', 'ec:8c:a2:b2:7a:bc', 'ec:8c:a2:f2:7a:bc', '74:3e:2b:fe:c7:1c', '74:3e:2b:be:c7:1c', '74:3e:2b:7e:c7:1c', '74:3e:2b:3e:c7:1c', 'ec:8c:a2:72:7a:bc', 'ec:8c:a2:32:7a:bc', '74:3e:2b:bd:86:bc', '74:3e:2b:7d:86:bc', '74:3e:2b:3d:86:bc', '74:3e:2b:fe:9d:6c', '74:3e:2b:be:9d:6c', '74:3e:2b:7e:9d:6c', '74:3e:2b:3e:9d:6c', '74:3e:2b:bd:79:bc', '74:3e:2b:7d:79:bc', '74:3e:2b:3d:79:bc', '74:3e:2b:bd:04:dc', '74:3e:2b:3d:04:dc', '74:3e:2b:fd:7e:1c', '74:3e:2b:bd:7e:1c', '74:3e:2b:7d:7e:1c', '74:3e:2b:3d:7e:1c', '74:3e:2b:fe:9c:dc', '74:3e:2b:be:9c:dc', '74:3e:2b:3e:9c:dc', '74:3e:2b:bd:6d:4c', '74:3e:2b:7e:9c:dc', 'de:9f:db:91:0e:dd', '74:3e:2b:bd:6f:88', '74:3e:2b:7d:6f:88', '74:3e:2b:3d:6f:88', '74:3e:2b:7e:1f:e8', '74:3e:2b:3e:1f:e8', '74:3e:2b:bc:d2:dc', '74:3e:2b:bc:d4:2c', '74:3e:2b:7c:d4:2c', '74:3e:2b:7d:85:ac', '74:3e:2b:3d:85:ac', '74:3e:2b:7c:b6:88', '74:3e:2b:3c:b6:88', '74:3e:2b:bd:85:a2', '74:3e:2b:bd:6d:42', '74:3e:2b:bc:d2:d2', '74:3e:2b:7d:04:dc', '74:3e:2b:bd:86:b2', '74:3e:2b:3d:86:b8', '74:3e:2b:be:c7:12', '74:3e:2b:7e:c7:18', '74:3e:2b:3e:c7:18', '74:3e:2b:fe:1f:ec', '74:3e:2b:7c:fb:78', '74:3e:2b:3d:85:a8', '74:3e:2b:bc:fb:7c', '74:3e:2b:3d:7e:18', '74:3e:2b:7d:6d:48', 'f8:f5:32:28:2d:c0', '74:3e:2b:7c:fb:7c', '74:3e:2b:bd:79:b2', '3c:17:10:94:eb:8e', '74:3e:2b:bd:7e:12', '74:3e:2b:7d:7e:18', '74:3e:2b:be:a3:38', '74:3e:2b:bd:6f:82', '74:3e:2b:bc:b6:82', 'b8:ee:0e:d6:53:72', '74:3e:2b:3d:79:b8', '74:3e:2b:3c:fb:78', '32:cd:a7:fc:3b:2b', 'ec:8c:a2:b2:7a:b8', 'ec:8c:a2:32:7a:b8', '74:3e:2b:bd:6e:62', '74:3e:2b:7d:6e:68', '74:3e:2b:3d:6e:68', '2c:30:33:f8:b8:b9', '74:3e:2b:bd:04:d2', '74:3e:2b:3d:04:d8', '74:3e:2b:7c:d2:dc', 'a8:9a:93:8a:84:7e', '74:3e:2b:3c:d2:dc', 'b4:2a:0e:10:47:0a', '78:29:ed:19:cb:ef', '74:3e:2b:bd:6e:68', '58:20:b1:3c:74:1f', 'b4:2a:0e:c7:0f:ae', '74:3e:2b:bc:fb:72', 'ec:8c:a2:72:7a:b8', 'c8:3a:35:90:b2:11', '10:86:8c:18:48:e8', '78:29:ed:4c:b2:51', '2c:30:33:ff:a5:f9', '74:3e:2b:be:a3:32', 'a0:8c:fd:6c:7d:10', '58:90:43:45:2b:e4', '74:3e:2b:3e:a3:38', '30:46:9a:fb:c5:a3', '74:3e:2b:be:c7:58', 'e6:f5:32:28:2d:c3', '74:3e:2b:bc:b6:8c', '74:3e:2b:be:c7:52', '1c:b0:44:cd:a2:48', '74:3e:2b:7e:c7:58', 'ae:63:be:86:5c:03', 'a0:64:8f:f7:d1:1d', '74:3e:2b:7c:d5:08', '40:49:0f:c3:fa:7b', '74:3e:2b:3e:c7:58', '74:3e:2b:fe:88:2c', '74:3e:2b:7e:a3:38', '74:3e:2b:fe:c7:5c', '74:3e:2b:be:c7:5c', '74:3e:2b:3c:b6:8c', '74:3e:2b:7d:6a:e8', '74:3e:2b:7c:b6:8c', '74:3e:2b:7e:c7:5c', '74:3e:2b:3e:c7:5c', '74:3e:2b:7e:88:2c', '74:3e:2b:be:88:2c', '74:3e:2b:7d:05:58', '74:3e:2b:3e:88:2c']
wifi_data_room_1 = [76, 26, 44, 76, 24, 40, 32, 24, 50, 54, 54, 54, 30, 114, 114, 114, 114, 32, 32, 26, 72, 60, 44, 34, 36, 34, 86, 42, 54, 72, 34, 38, 34, 0, 24, 58, 58, 70, 68, 70, 72, 58, 60, 32, 30, 32, 32, 32, 32, 32, 62, 62, 62, 0, 0, 26, 28, 30, 26, 98, 98, 100, 24, 100, 26, 22, 24, 26, 40, 42, 0, 30, 30, 32, 30, 22, 28, 58, 38, 38, 0, 58, 56, 52, 52, 52, 0, 34, 58, 26, 46, 36, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
wifi_data_room_2 = [40,0,32,96,32,28,52,24,68,70,72,72,0,132,134,134,134,26,26,0,52,40,68,30,52,30,72,64,74,70,0,46,0,50,48,44,44,68,68,70,68,0,0,26,30,32,46,46,46,46,82,82,82,0,0,48,48,48,0,0,0,0,50,130,32,32,34,34,30,30,0,34,0,38,38,32,26,60,48,46,0,40,40,80,80,80,0,20,60,38,70,54,16,38,102,0,64,70,28,0,26,0,100,62,56,62,62,32,28,30,0,36,30,26,0,24,0,0,26,0,0,62,62,0,0,0,0,26,0,0,24,38,30,0,0,28,0,28,26,20,20,24,28,0,22,0,0,0,0,0,0,0,0,0,0,0]
wifi_data = [[76, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 88, 106, 106, 0, 0, 0, 0, 46, 56, 0, 0, 0, 84, 38, 48, 138, 40, 42, 34, 0, 0, 66, 68, 64, 64, 64, 64, 66, 64, 28, 30, 30, 42, 42, 42, 42, 68, 70, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 22, 22, 30, 28, 0, 0, 0, 0, 42, 0, 0, 0, 62, 0, 62, 0, 42, 0, 0, 52, 44, 0, 0, 74, 0, 54, 52, 0, 0, 0, 0, 74, 40, 0, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [76, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 88, 106, 106, 0, 0, 0, 0, 46, 56, 0, 0, 0, 84, 38, 48, 138, 40, 42, 34, 0, 0, 66, 68, 64, 64, 64, 64, 66, 64, 28, 30, 30, 42, 42, 42, 42, 68, 70, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 22, 22, 30, 28, 0, 0, 0, 0, 42, 0, 0, 0, 62, 0, 62, 0, 42, 0, 0, 52, 44, 0, 0, 74, 0, 54, 52, 0, 0, 0, 0, 74, 40, 0, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

# Sample: Live predict
# scanner = WIFI_Scanner()
# scanner.scan(3)
# wifi_data, header = scanner.report_with_header_from_csv('Room1Data5 remove-zero add-room-num and Room2Data1 remove-zero add-room-num merged and Room3Data1 remove-zero add-room-num merged.csv')
# print(header)
# print(wifi_data)

# Note: if data only have 1 dimension, need to reshape it
# data = np.asarray(wifi_data_room_1).reshape((1, -1))

# Use data to make prediction and output confidence
data = wifi_data
np.set_printoptions(suppress=True)
print(loaded_model.predict(data))
print(np.multiply(100,np.exp(loaded_model.predict_log_proba(data))))